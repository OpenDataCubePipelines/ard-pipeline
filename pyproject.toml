[build-system]
build-backend = 'mesonpy'
requires = [
    # For package version calculation (via Git)
    "setuptools>=45",
    # version 8 seems to have broken the write_file functionality
    # (when called directly: python -m setuptools_scm)
    "setuptools_scm[toml]>=6.2,<8",
    'meson-python',
    # For f2py
    'numpy'
]

[project]
authors = [
    {name = 'Geoscience Australia', email = 'earth.observation@ga.gov.au'}
]
dependencies = [
    "attrs>=17.4.0",
    "checksumdir",
    "ciso8601",
    "click",
    "click_datetime",
    "eodatasets3>=0.19.2",
    "ephem>=3.7.5.3",
    "fiona>=1.7.0",
    "folium",
    "GDAL>=1.9.2",
    "geopandas>=0.1.1",
    "h5py>=2.5.0",
    "hdf5plugin",
    "importlib-metadata;python_version<'3.8'",
    "luigi>2.7.6",
    "nested_lookup>=0.1.3",
    "numexpr>=2.4.6",
    "numpy>=1.8,<2",
    "pandas>=0.17.1",
    "pyproj>1.9.5",
    "python-dateutil>=2.6.1",
    "python-fmask",
    "pyyaml>=3.11",
    "rasterio>1,!=1.0.3.post1,!=1.0.3",  # issue with /vsizip/ reader
    "rios",
    "s2cloudless>=1.5.0",
    "scikit-image>=0.8.2",
    "scipy>=0.14",
    "sentinelhub>=3.4.2",
    "shapely>=1.5.13",
    "structlog>=16.1.0"
]
# This will install default versions, but the actual dependency list
# above deliberately isn't fixed to these versions.
#
# To choose a different version, install it before installing this module.
dependency-links = [
    "git+https://github.com/ubarsc/rios@rios-1.4.10#egg=rios",
    "git+https://github.com/ubarsc/python-fmask@pythonfmask-0.5.7#egg=python-fmask"
]
description = 'ARD image processing'
dynamic = ["version"]
# Was needed for tesp .. here too? TODO
include_package_data = true
license = {file = 'LICENCE.md'}
name = 'ard-pipeline'
package_data = {"eugl.gqa" = ["data/*.csv"]}
readme = 'README.md'
requires-python = '>=3.8'

[project.scripts]
ard_batch_summary = "tesp.scripts.batch_summary:main"
ard_pbs = "tesp.scripts.ard_pbs:main"
ard_s2package = "tesp.scripts.s2_package:package_output"
ard_search_s2 = "tesp.scripts.search_s2:main"
ard_show = "wagl.scripts.wagl_show:main"
ard_test_dsm = "wagl.scripts.test_dsm:main"
ard_test_exiting_angles = "wagl.scripts.test_exiting_angles:main"
ard_test_incident_angles = "wagl.scripts.test_incident_angles:main"
ard_test_relative_slope = "wagl.scripts.test_relative_slope:main"
ard_test_satellite_solar_angles = "wagl.scripts.test_satellite_solar_angles:main"
ard_test_slope_aspect = "wagl.scripts.test_slope_aspec:main"
ard_test_terrain_shadow_masks = "wagl.scripts.test_terrain_shadow_masks:main"
wagl_aot_converter = "wagl.scripts.aot_converter:main"
wagl_buildvrt = "wagl.scripts.wagl_buildvrt:main"
wagl_convert = "wagl.scripts.wagl_convert:main"
wagl_ls = " wagl.scripts.wagl_ls:main"
wagl_residuals = "wagl.scripts.wagl_residuals:main"

[tool.ruff]
ignore = [
    "S101",  # Allow asserts
    "EXE001"  # "Shebang is present, but not executable". Too many to list right now.
]
# Which checkers to enable?
select = [
    "A",  # Don't shadow built-ins
    "C4",  # Use list comprehensions etc
    "E",  # pycodestyle
    "EXE",  # Shebangs+Executable permisssions should match
    "F",  # pyflakes
    "G",  # Use logging formatter, not manual string concat
    "I",  # Auto-sort imports
    "ICN",  # Use standard import names, like np for numpy
    "N",  # pep8-naming
    "NPY",  # Numpy
    "RUF",  # Ruf-specific python rules
    # "S",  # Bandit (security) -- explore warnings and enable in future?
    "UP"  # pyupgrade
]
target-version = "py38"

[tool.ruff.per-file-ignores]
"tesp/constants.py" = ["A003"]  # Shadowing built-in "all". It's a class method name, so would have to be renamed everywhere?
# These historically weren't linted for line length.
"tesp/scripts/ard_pbs.py" = ["E501"]
"testing/fmask-generate-test-data.py" = ["E501"]
# These historically didn't follow pep8 naming.
"tests/test_acquisition.py" = ["N802", "N803", "N806", "N816", "N817"]
"tests/test_blrb.py" = ["N802", "N803", "N806", "N816", "N817"]
"tests/test_geobox.py" = ["N802", "N803", "N806", "N816", "N817"]
"tests/test_hdf5.py" = [
    "NPY002",  # Allow historical randint usage, until I read the docs on how to use Random. (TODO: fixable)
    "RUF012"  # Don't need to declare mutable ClassVar. An old test.
]
"tests/test_lon_lat.py" = ["N802", "N803", "N806", "N816", "N817"]
"tests/test_random_locations.py" = ["N802", "N803", "N806", "N816", "N817"]
"tests/test_read_subset.py" = ["N802", "N803", "N806", "N816", "N817"]
"tests/test_tiling.py" = [
    "RUF012"  # Don't need to declare mutable ClassVar. An old test.
]
"tests/test_vincenty.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/acquisition/__init__.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/brdf.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/geobox.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/interpolation.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/logs.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/modtran.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/reflectance.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/standardise.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/temperature.py" = ["N802", "N803", "N806", "N816", "N817"]
"wagl/unittesting_tools.py" = [
    "N802",
    "N803",
    "N806",
    "N816",
    "N817",
    "NPY002"  # randint usage. TODO: fixable
]
"wagl/vincenty.py" = ["N802", "N803", "N806", "N816", "N817"]

# Matching old behaviour: We auto-format with the smaller line default
# ...  but only enforce line length to be under this larger 120 limit.
[tool.ruff.pycodestyle]
max-line-length = 120

[tool.setuptools_scm]
write_to = "wagl/_version.py"
