#!/usr/bin/env python3
"""
Compare two directories filled with datasets
"""

import sys
from pathlib import Path
from typing import Iterable, List

import click
import numpy as np
import rasterio
from click import secho
from eodatasets3 import serialise
from eodatasets3.ui import PathPath, uri_resolve


class InvalidDatasetError(Exception):
    pass


def find_yaml_file(path: Path) -> List[Path]:
    # Did they give us a metadata file directly?
    if path.is_file():
        return [path]

    # Otherwise find all the datasets in the directory.
    fs = sorted(path.rglob("*.odc-metadata.yaml"))
    if not fs:
        raise InvalidDatasetError(
            f"Could not find any output metadata files for {path.as_posix()!r}"
        )

    return fs


def show(result):
    if result is None or result["diff"] == 0:
        secho("identical", fg="green")
    else:
        secho(
            f'\t{result["diff"]} pixels differ ({result["same"]} same), max difference {result["max_diff"]}',
            fg="red",
        )


def compare(original_pkg: Path, new_package: Path):
    failures = 0
    original_yamls = find_yaml_file(original_pkg)
    new_yamls = find_yaml_file(new_package)

    ##
    # First just see if the set of output datasets are the same.

    # Convert them to relative paths, so we can compare them.
    original_yamls_relative = [p.relative_to(original_pkg) for p in original_yamls]
    new_yamls_relative = [p.relative_to(new_package) for p in new_yamls]
    if original_yamls_relative != new_yamls_relative:
        # Raise an error, printing which yamls are missing from the new package.
        missing = set(original_yamls_relative) - set(new_yamls_relative)
        if missing:
            raise InvalidDatasetError(
                f"Missing yaml files from new package outputs: {printable_list(missing)}"
            )

        # Otherwise just print the two lists
        raise InvalidDatasetError(
            f"Yaml files in new package do not match original package:"
            f"{printable_list(original_yamls_relative)}"
            "!="
            f"{printable_list(new_yamls_relative)}"
        )

    secho(f"{len(new_yamls)} datasets found in both packages", fg="green")

    # Now compare images.
    for original_yaml, new_yaml in zip(original_yamls, new_yamls):
        original_dataset = serialise.from_path(original_yaml)
        new_dataset = serialise.from_path(new_yaml)
        secho(f"Comparing dataset {new_dataset.label}", bold=True)

        # Make sure there's at least one location (but an embedded one will still come first).
        original_dataset.locations = (original_dataset.locations or []) + [
            original_yaml
        ]
        new_dataset.locations = (new_dataset.locations or []) + [new_yaml]

        for name, measurement in new_dataset.measurements.items():
            new_image_path = uri_resolve(new_dataset.locations[0], measurement.path)
            old_image_path = uri_resolve(
                original_dataset.locations[0], original_dataset.measurements[name].path
            )
            secho(f"{name}: {measurement.path}")
            result = compare_images(new_image_path, old_image_path)

            if result["diff"] > 0:
                show(result)
                failures += 1

    if failures:
        secho(f"{failures} differing image(s)", fg="red")
    else:
        secho("No differences found", fg="green")
    return failures


def printable_list(files: Iterable[Path]) -> str:
    """An indendented list of files, for printing to the user."""
    files_printable = ",\n\t".join(f.as_posix() for f in files)
    return f"\n\t{files_printable}\n"


def compare_images(path1: str, path2: str):
    chunk_size = (4096, 4096)

    with rasterio.open(path1) as img1, rasterio.open(path2) as img2:
        assert img1.shape == img2.shape

        max_diff = 0
        diff_pixel_count = 0
        same_pixel_count = 0

        for i in range(0, img1.shape[0], chunk_size[0]):
            for j in range(0, img1.shape[1], chunk_size[1]):
                window = rasterio.windows.Window(j, i, chunk_size[1], chunk_size[0])

                data1 = img1.read(1, window=window)
                data2 = img2.read(1, window=window)

                if np.all(data1 == data2):
                    same_pixel_count += chunk_size[0] * chunk_size[1]
                else:
                    # They differ!
                    max_diff = max(max_diff, np.max(np.abs(data1 - data2)))
                    diff_pixel_count += np.sum(data1 != data2)
                    same_pixel_count += np.sum(data1 == data2)

    return {"max_diff": max_diff, "same": same_pixel_count, "diff": diff_pixel_count}


def display_difference(difference, i, j, chunk_size):
    import matplotlib.pyplot as plt

    # Display the difference
    plt.figure(figsize=(5, 5))
    plt.imshow(
        difference,
        cmap="bwr",
        vmin=-np.max(np.abs(difference)),
        vmax=np.max(np.abs(difference)),
    )
    plt.colorbar(label="Pixel difference (image1 - image2)")
    plt.title(
        f"Difference between the two images (chunk from {i},{j} to {i + chunk_size[0]},{j + chunk_size[1]})"
    )
    plt.show()


@click.command(help=__doc__)
@click.argument("in1", type=PathPath(exists=True))
@click.argument("in2", type=PathPath(exists=True))
def main(in1, in2):
    sys.exit(compare(in1, in2))


if __name__ == "__main__":
    main()
